
# 12-Hour Daily Timetable for Python + DSA

| Time            | Activity                              | Notes                                      |
|------------------|---------------------------------------|--------------------------------------------|
| **9:00 AM – 12:00 PM**  | **Udemy Lectures & Notes**            | Watch course videos; take structured notes |
| **12:00 PM – 12:30 PM** | **Break**                            | Relax, stretch                             |
| **12:30 PM – 3:30 PM**  | **Course Exercises**                 | Code along with assignments                |
| **3:30 PM – 4:00 PM**   | **Break**                            | Snack / walk                               |
| **4:00 PM – 6:00 PM**   | **LeetCode/HackerRank Practice**     | 1–2 problems on that week’s DS topic       |
| **6:00 PM – 6:30 PM**   | **Break**                            | Rest your mind                             |
| **6:30 PM – 8:30 PM**   | **Mini-Project / Deep Dive**         | Build or extend a small project; revisit tricky concepts |
| **8:30 PM – 9:00 PM**   | **Reflect & Plan**                   | Summarize key takeaways; outline tomorrow  |

---

## Weekly Breakdown for Python + DSA with Projects

| Week | Lectures & Exercises                            | DSA Focus                             | Project / Deliverable                                |
|:----:|--------------------------------------------------|---------------------------------------|------------------------------------------------------|
| **1**  | Python fundamentals (syntax, data types, loops) | Arrays & Strings (easy)               | CLI utility (e.g. file lister/searcher)              |
| **2**  | OOP in Python (classes, inheritance, modules)    | Stacks & Queues; Linked Lists (easy)  | Extend CLI with class-based design                   |
| **3**  | Recursion & Trees (binary trees, traversals)     | Trees & Recursion (medium)            | Visualizer or simple “tree traverser” script         |
| **4**  | Sorting & Searching Algorithms                   | Quick/Merge Sort; Binary Search       | Sorting algorithm demo (e.g. console or web visual)  |
| **5**  | Dynamic Programming & Greedy                     | DP on arrays (knapsack, LIS); Greedy  | DP problem solver CLI (e.g. coin change, knapsack)   |
| **6**  | Revision & Interview Prep                        | Mixed-topic mock contests             | Final mini full-stack project: integrate Python scripts with basic web UI (Flask/Django) and deploy on Heroku |

---

## Project Examples for Each Week

| Week | Project Type                  | Simple Description |
|------|-------------------------------|--------------------|
| 1    | CLI File Lister/Searcher      | A Python script that lists files or searches by name. Like a mini File Explorer, in terminal. |
| 2    | Class-based CLI App           | Same tool as above, but now using `class FileSearcher:` etc. |
| 3    | Tree Visualizer (Text-based)  | Given a binary tree, print it like a diagram in terminal. (Perfect for recursion!) |
| 4    | Sorting Visualizer (Console)  | Show step-by-step sorting in terminal, or save steps in a file. |
| 5    | DP Coin Change Solver         | User inputs coin values and amount, script returns min coins needed. |
| 6    | Flask Web UI for a Tool       | Build a webpage that lets users upload a file and run your Python tool. |

---

## Notes:

1. **Track Progress**: Tick off what you’ve learned at the end of each week.
2. **Reflect Daily**: Your 30-minute wrap-up is when you identify gaps and plan the next day.
3. **Build As You Learn**: Each mini-project ties back to what you’re learning that week.
4. **Stay Consistent**: Six weeks of focused work + Sunday reviews = real momentum.
